---
# Name of the workflow - appears in the GitHub Actions tab
name: ScamShield CI/CD Pipeline

# Define when this workflow will run
on:
  # Run when code is pushed to the main branch
  push:
    branches: [main]
  # Run when a pull request is made to the main branch
  pull_request:
    branches: [main]

# A workflow is made up of one or more jobs
jobs:
  # First job: Lint and test the frontend
  frontend:
    name: Frontend Checks
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      # Step 3: Install frontend dependencies
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      # Step 4: Run the linter
      - name: Lint
        working-directory: ./frontend
        run: npm run lint

      # Commented out as we haven't set up tests yet
      # - name: Test
      #   working-directory: ./frontend
      #   run: npm test

  # Second job: Check each backend service
  backend:
    name: Backend Service - ${{ matrix.service }}
    runs-on: ubuntu-latest

    # Use a matrix strategy to run the same job on multiple services
    strategy:
      matrix:
        service: [api-gateway, auth-service, reporting-service]

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: >-
            services/${{ matrix.service }}/package-lock.json

      # Step 3: Install service dependencies
      - name: Install dependencies
        working-directory: ./services/${{ matrix.service }}
        run: npm ci

      # Step 4: TypeScript compilation check
      - name: Type check
        working-directory: ./services/${{ matrix.service }}
        run: npx tsc --noEmit

      # Commented out as we haven't set up the build script yet
      # - name: Build
      #   working-directory: ./services/${{ matrix.service }}
      #   run: npm run build

      # Commented out as we haven't set up tests yet
      # - name: Test
      #   working-directory: ./services/${{ matrix.service }}
      #   run: npm test

  # Third job: Build and test Docker setup
  docker:
    name: Docker Build and Test
    # This job depends on the frontend and backend jobs
    needs: [frontend, backend]
    # Only run this job on pushes to main, not on pull requests
    if: >-
      github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Use Docker Compose GitHub Action
      - name: Set up Docker Compose
        uses: ndeloof/install-compose-action@v1

      # Step 4: Build and test the Docker Compose setup
      - name: Build and test Docker Compose
        run: |
          # Build the Docker images
          docker-compose build

          # Start the Docker containers in detached mode
          docker-compose up -d

          # Wait for services to start
          echo "Waiting for services to start..."
          sleep 20

          # Check if containers are running
          docker-compose ps

          # Get logs from each service (for debugging)
          echo "Frontend logs:"
          docker-compose logs frontend

          echo "API Gateway logs:"
          docker-compose logs api-gateway

          # Stop and remove the containers
          docker-compose down

  # This is a placeholder for future AWS deployment
  # deploy:
  #   name: Deploy to AWS
  #   needs: [docker]
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1
  #
  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v2
  #
  #     # Add steps to push Docker images to ECR and deploy to ECS/EKS
